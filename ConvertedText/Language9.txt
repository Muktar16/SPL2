graphql a query language for reading and
mutating data in apis
as a back-end developer graphql provides
a type system
where you can describe a schema for your
data in turn
this gives front-end consumers of the
api the power to explore
and request the exact data they need
traditionally
web developers have consumed apis using
rest where data entities
live on a bunch of urls on a server when
a request is received
the api responds with the full data
payload of that entity
that sounds simple enough but there are
two potential drawbacks here
we may need multiple entities at one
time in which case
each request is under fetching the
actual data we want
in other cases we may only want a small
subset of a data entity
in which case we need to over fetch from
the api and that of course is bad for
the environment
how dare you instead of multiple urls a
graphql api
has a single entry point data is queried
or fetched
by describing it with a syntax that
mirrors its return shape in json
the front-end developer describes the
data they want while the back-end
developer
writes code to resolve the request and
it all happens in a syntax that can work
with any programming language
we can start defining a schema with our
own custom objects using the type
keyword
a type can have multiple fields like a
unique id
and we'll make that required with a bang
let's also give it integer and string
values
then create a relationship with another
type a creator can have many videos
which we can represent by wrapping the
type in brackets on the flip side
a video belongs to a creator now every
graphql api
has a query type which is the main entry
point for a consumer of the api
we can query a list of videos or an
individual user based on their id
that's how a consumer reads data but
they may also want to mutate data
in which case we implement a mutation
type that defines how data can be
modified on the api
from there we can define code to resolve
this data in any programming language
once deployed any developer consuming
this api will be able to explore it with
a complete understanding
of all possible queries and data
entities which means the tooling can
autocomplete your query as you type it
out in your editor
this has been graphql in 100 seconds if
you want to see more short videos like
this make sure to like and subscribe and
turn on notifications because there is a
lot more on the way
thanks for watching and i will see you
in the next one
